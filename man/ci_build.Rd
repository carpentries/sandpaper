% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ci_build.R
\name{ci_build_markdown}
\alias{ci_build_markdown}
\alias{ci_build_site}
\title{Build and deploy individual site components to a remote branch}
\usage{
ci_build_markdown(
  path = ".",
  branch = "md-outputs",
  remote = "origin",
  reset = FALSE
)

ci_build_site(
  path = ".",
  branch = "gh-pages",
  md = "md-outputs",
  remote = "origin",
  reset = FALSE
)
}
\arguments{
\item{path}{path to the lesson}

\item{branch}{the branch name containing the output:
\itemize{
\item \code{ci_build_markdown()}: defaults to \code{md-output}, corresponds to
\code{md_branch} in \code{\link[=ci_deploy]{ci_deploy()}}
\item \code{ci_build_site()}: defaults to \code{gh-pages}, corresponds to \code{site_branch}
in \code{\link[=ci_deploy]{ci_deploy()}}
}}

\item{remote}{the name of the git remote to which you should deploy.}

\item{reset}{if \code{TRUE}, the markdown cache is cleared before rebuilding,
this defaults to \code{FALSE} meaning the markdown cache will be provisioned
and used.}

\item{md}{the branch name that contains the markdown outputs}
}
\value{
\itemize{
\item \code{ci_build_markdown()}: an \code{\link[=expression]{expression()}} that is evaluated to tear down
the worktree that was created.
\item \code{ci_build_site()}: nothing, it is used for its side-effect.
}
}
\description{
These are the internal functions which provision and deploy lesson
components to orphan git branches. These are called by \code{\link[=ci_deploy]{ci_deploy()}}.
\strong{These functions have the side-effect of creating and updating orphan
branches on a remote repository. It is assumed that you have access to your
remote}.
}
\details{
The only place these two functions are used are within \code{\link[=ci_deploy]{ci_deploy()}}, which
has the de-facto use-case for these functions, thus, this page has no
examples. Both of these functions do the same general process:
\enumerate{
\item provision a git worktree in the appropriate folder with
\code{\link[=git_worktree_setup]{git_worktree_setup()}}
\item build the requisite content in that folder
\item commit and push the contents to the worktree with
\code{\link[=github_worktree_commit]{github_worktree_commit()}}
}

There are caveats for each of the two functions as listed in the sections
below.
\subsection{\code{ci_build_markdown()}}{

This will not clean up after itself by default. You must save the output in
an object and run \code{eval(obj)} to run the clean up process. This is in place
so that \code{ci_build_site()} can use the worktree from the markdown outputs in
order to build the site.
}

\subsection{\code{ci_build_site()}}{

In addition to the steps listed above, this function needs to verify that it
has the materials necessary to build the HTML site.

It first checks for the presence of \verb{site/built/}. This folder can be
generated by \code{ci_build_markdown()} or by \code{\link[=build_markdown]{build_markdown()}}. If the folder
does not exist or it is empty, then this function will attempt to fetch the
folder from the branch in \code{md}.

Once everything is built and pushed, this function will additionally destroy
the work tree.
}
}
\note{
\code{ci_build_markdown()} will set the \code{sandpaper.use_renv}
option to TRUE, which means that it will \emph{always} use the \code{{renv}}
package cache if the lesson uses R Markdown.
}
\keyword{internal}
