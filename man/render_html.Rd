% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/render_html.R
\name{render_html}
\alias{render_html}
\title{Render html from a markdown file}
\usage{
render_html(path_in, ..., quiet = FALSE, glosario = NULL)
}
\arguments{
\item{path_in}{path to a markdown file}

\item{...}{extra options (e.g. lua filters) to be passed to pandoc}

\item{quiet}{if \code{TRUE}, no output is produced. Default is \code{FALSE}, which
reports the markdown build via pandoc}

\item{glosario}{a named list of glosario terms and definitions. Defaults to NULL.}
}
\value{
a character containing the rendred HTML file
}
\description{
This uses \code{\link[rmarkdown:pandoc_convert]{rmarkdown::pandoc_convert()}} to render HTML from a markdown file.
We've specified pandoc extensions that align with the features desired in the
Carpentries such as \code{markdown_in_html_blocks}, \code{tex_math_dollars}, and
\code{native_divs}.
}
\examples{

if (rmarkdown::pandoc_available("2.11")) {
# first example---markdown to HTML
tmp <- tempfile()
ex <- c("# Markdown",
  "",
  "::: challenge",
  "",
  "How do you write markdown divs?",
  "",
  ":::"
)
writeLines(ex, tmp)
cat(sandpaper:::render_html(tmp))

# adding a lua filter

lua <- tempfile()
lu <- c("Str = function (elem)",
"  if elem.text == 'markdown' then",
"    return pandoc.Emph {pandoc.Str 'mowdrank'}",
"  end",
"end")
writeLines(lu, lua)
lf <- paste0("--lua-filter=", lua)
cat(sandpaper:::render_html(tmp, lf))
}
}
\keyword{internal}
