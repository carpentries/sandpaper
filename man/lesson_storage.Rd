% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-store.R
\name{this_lesson}
\alias{this_lesson}
\alias{clear_this_lesson}
\alias{set_this_lesson}
\alias{set_resource_list}
\alias{clear_resource_list}
\title{Internal cache for storing pre-computed lesson objects}
\usage{
this_lesson(path)

clear_this_lesson()

set_this_lesson(path)

set_resource_list(path)

clear_resource_list(path)
}
\arguments{
\item{path}{a path to the current lesson}
}
\description{
A storage cache for \link[pegboard:Lesson]{pegboard::Lesson} objects and other pre-computed items
for use by other internal functions while \code{{sandpaper}} is working.
}
\section{Lesson Object Storage}{


\code{this_lesson()} will return a \link[pegboard:Lesson]{pegboard::Lesson} object if it has
previously been stored. There are three values that are cached:
\itemize{
\item \code{.this_lesson} a \link[pegboard:Lesson]{pegboard::Lesson} object
\item \code{.this_diff} a charcter vector from \code{\link[gert:git_diff]{gert::git_diff_patch()}}
\item \code{.this_status} a data frame from \code{\link[gert:git_commit]{gert::git_status()}}
\item \code{.this_commit} the hash of the most recent commit
}

The function \code{this_lesson()} first checks if \code{.this_diff} is different than
the output of \code{\link[gert:git_diff]{gert::git_diff_patch()}}, then checks if there are any
changes to \code{\link[gert:git_commit]{gert::git_status()}}, and then finally checks if the commits are
identical. If there are differences or the values are not previously
cached, the lesson is loaded into memory, otherwise, it is fetched from the
previously stored lesson.

The storage cache is in a global package object called \code{.store}, which is
initialised when \code{{sandpaper}} is loaded via \code{.lesson_store()}

If there have been no changes git is aware of, the lesson remains the same.
}

\section{Pre-Computed Object Storage}{


A side-effect of \code{this_lesson()} is that it will also initialise
pre-computed objects that pertain to the lesson itself. These are
initialised via \code{set_globals()}. These storage objects are:
\itemize{
\item \code{.resources}: a list of markdown resources for the lesson derived from
\code{get_resource_list()} via \code{set_resource_list()}
\item \code{this_metadata}: metadata with template for including in the pages.
initialised in \code{initialise_metadata()} via \code{set_globals()}
\item \code{learner_globals}: variables for the learner version of the pages
initialised in \code{set_globals()}
\item \code{instructor_globals}: variables for the instructor version of the pages
initialised in \code{set_globals()}
}
}

\examples{
tmp <- tempfile()
create_lesson(tmp, open = FALSE, rmd = FALSE)
# Read the lesson into cache
system.time(sandpaper:::this_lesson(tmp))
system.time(sandpaper:::this_lesson(tmp)) # less time to read in once cached
l <- sandpaper:::this_lesson(tmp)
l
# clear the cache
sandpaper:::clear_this_lesson()
system.time(sandpaper:::this_lesson(tmp)) # have to re-read the lesson
system.time(sandpaper:::this_lesson(tmp))
unlink(tmp)
}
\keyword{internal}
